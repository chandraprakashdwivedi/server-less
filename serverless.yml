service: test-sls # NOTE: update this with your service name
#awsKmsKeyArn: arn:aws:kms:us-east-1:XXXXXX:key/some-hash

provider:
  name: aws
  runtime: python3.6
  versionFunctions: false
  #role: arn:aws:iam::12345:role/LambdaRole #For roles based login
  stage: dev
  region: ap-south-1
  #notificationArns:
   #   - 'arn:aws:sns:ap-south-1:XXXXXX:mytopic'
  
# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "Ref" : "ServerlessDeploymentBucket"
            - "/*"


# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

  environment:
    #BUCKET: {"Fn::Join" :${self:service}-${self:provider.stage}-uploads}
    #TOPIC: 


functions:
  s3bucket:
    handler: lambda_functions/s3bucket.s3list
    memorySize: 128
    description: My function
    #onError: {"Fn::Sub" :"arn:aws:sns:${self:provider.region}:{ "Ref" : "AWS::AccountId" }:${self:service}-${self:provider.stage}-topic" }
    events:
        - http:
            path: first-endpoint
            method: GET
            cors: true
        #- s3: 
            #bucket: test-sls-dev-uploads  #Here it will create a new bucket
            #event: s3:ObjectCreated:*
            #rules:
             #- prefix: uploads/
             #- suffix: .jpg
        #- sns: ${env:TOPIC}
 

##  list:
##    handler: lambda_functions/get_all_responses.list_responses
##    events:
##      - http:
##          path: lambda_functions
##          method: get
##          cors: true
##  delete:
##    handler: lambda_functions/delete_response.delete
##    events:
##      - http:
##          path: lambda_functions/{app_name}
##          method: delete
##          cors: true
##  insert:
##    handler: lambda_functions/insert_response.insert
##    events:
##      - http:
##          path: lambda_functions
##          method: post
##          cors: true
##  evaluate:
##    handler: lambda_functions/evaluate_response.evaluate
##    events:
##      - http:
##          path: lambda_functions/{app_name}
##          method: get
##          cors: true

resources:
  Resources:
      uploadBucket:
          Type: AWS::S3::Bucket
          Properties:
              BucketName: ${self:service}-${self:provider.stage}-uploads
      SQSQueue:
          Type: AWS::SQS::Queue
          Properties:
            QueueName: ${self:service}-${self:provider.stage}-queue
      SNSTopic:
          Type: AWS::SNS::Topic
          Properties:
            DisplayName: SNSTopic
            TopicName: ${self:service}-${self:provider.stage}-topic
      SNSSubscription:
          Type: AWS::SNS::Subscription
          Properties:
              Endpoint: chandra.prakash363@gmail.com
              Protocol: email
              TopicArn: { "Fn::Join" : ["", ["arn:aws:sns:${self:provider.region}:", { "Ref" : "AWS::AccountId" }, ":${self:resources.Resources.SNSTopic.Properties.TopicName}" ] ]  }

                
#    TestDynamoDbTable:
#      Type: 'AWS::DynamoDB::Table'
#      DeletionPolicy: Retain
#      Properties:
#        AttributeDefinitions:
#          -
#            AttributeName: app_name
#            AttributeType: S
#        KeySchema:
#          -
#            AttributeName: app_name
#            KeyType: HASH
#        ProvisionedThroughput:
#          ReadCapacityUnits: 1
#          WriteCapacityUnits: 1
#        TableName: ${self:service}-${self:provider.stage}-table1
      
